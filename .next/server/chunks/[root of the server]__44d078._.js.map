{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///home/cayetano/Proyectos/Apache2/nextjs-dashboard/app/seed/route.ts"],"sourcesContent":["// //route.ts\n// import bcrypt from 'bcrypt';\n// import { invoices, customers, revenue, users } from '../lib/placeholder-data';\n// import pg from 'pg'\n// const { Client } = pg\n// const client = new Client()\n\n// async function seedUsers() {\n//   await client.query(`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`);\n//   await client.query(`\n//     CREATE TABLE IF NOT EXISTS users (\n//       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n//       name VARCHAR(255) NOT NULL,\n//       email TEXT NOT NULL UNIQUE,\n//       password TEXT NOT NULL\n//     );\n//   `);\n\n//   const insertedUsers = await Promise.all(\n//     users.map(async (user) => {\n//       const hashedPassword = await bcrypt.hash(user.password, 10);\n//       return client.query(`\n//         INSERT INTO users (id, name, email, password)\n//         VALUES ('${user.id}', '${user.name}', '${user.email}', '${hashedPassword}')\n//         ON CONFLICT (id) DO NOTHING;\n//       `);\n//     }),\n//   );\n\n//   return insertedUsers;\n// }\n\n// async function seedInvoices() {\n//   await client.query(`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`);\n\n//   await client.query(`\n//     CREATE TABLE IF NOT EXISTS invoices (\n//       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n//       customer_id UUID NOT NULL,\n//       amount INT NOT NULL,\n//       status VARCHAR(255) NOT NULL,\n//       date DATE NOT NULL\n//     );\n//   `);\n\n//   const insertedInvoices = await Promise.all(\n//     invoices.map(\n//       (invoice) => client.query(`\n//         INSERT INTO invoices (customer_id, amount, status, date)\n//         VALUES ('${invoice.customer_id}', '${invoice.amount}', '${invoice.status}', '${invoice.date}')\n//         ON CONFLICT (id) DO NOTHING;\n//       `),\n//     ),\n//   );\n\n//   return insertedInvoices;\n// }\n\n// async function seedCustomers() {\n//   await client.query(`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`);\n\n//   await client.query(`\n//     CREATE TABLE IF NOT EXISTS customers (\n//       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n//       name VARCHAR(255) NOT NULL,\n//       email VARCHAR(255) NOT NULL,\n//       image_url VARCHAR(255) NOT NULL\n//     );\n//   `);\n\n//   const insertedCustomers = await Promise.all(\n//     customers.map(\n//       (customer) => client.query(`\n//         INSERT INTO customers (id, name, email, image_url)\n//         VALUES ('${customer.id}', '${customer.name}', '${customer.email}', '${customer.image_url}')\n//         ON CONFLICT (id) DO NOTHING;\n//       `),\n//     ),\n//   );\n\n//   return insertedCustomers;\n// }\n\n// async function seedRevenue() {\n//   await client.query(`\n//     CREATE TABLE IF NOT EXISTS revenue (\n//       month VARCHAR(4) NOT NULL UNIQUE,\n//       revenue INT NOT NULL\n//     );\n//   `);\n\n//   const insertedRevenue = await Promise.all(\n//     revenue.map(\n//       (rev) => client.query(`\n//         INSERT INTO revenue (month, revenue)\n//         VALUES ('${rev.month}', '${rev.revenue}')\n//         ON CONFLICT (month) DO NOTHING;\n//       `),\n//     ),\n//   );\n\n//   return insertedRevenue;\n// }\n\n// export async function GET() {\n\n//   try {\n//     await client.connect()\n\n//     await seedUsers();\n//     await seedCustomers();\n//     await seedInvoices();\n//     await seedRevenue();\n//     await client.end()\n\n//     return Response.json({ message: 'Database seeded successfully' });\n//   } catch (error) {\n//     await client.end()\n\n//     return Response.json({ error }, { status: 500 });\n//   }\n// }\n\nexport async function GET() {\n  return Response.json({ message: 'Database already seeded. Endpoint closed.' });\n}\n"],"names":[],"mappings":"AAAA,aAAa;AACb,+BAA+B;AAC/B,iFAAiF;AACjF,sBAAsB;AACtB,wBAAwB;AACxB,8BAA8B;AAE9B,+BAA+B;AAC/B,sEAAsE;AACtE,yBAAyB;AACzB,yCAAyC;AACzC,wDAAwD;AACxD,oCAAoC;AACpC,oCAAoC;AACpC,+BAA+B;AAC/B,SAAS;AACT,QAAQ;AAER,6CAA6C;AAC7C,kCAAkC;AAClC,qEAAqE;AACrE,8BAA8B;AAC9B,wDAAwD;AACxD,sFAAsF;AACtF,uCAAuC;AACvC,YAAY;AACZ,UAAU;AACV,OAAO;AAEP,0BAA0B;AAC1B,IAAI;AAEJ,kCAAkC;AAClC,sEAAsE;AAEtE,yBAAyB;AACzB,4CAA4C;AAC5C,wDAAwD;AACxD,mCAAmC;AACnC,6BAA6B;AAC7B,sCAAsC;AACtC,2BAA2B;AAC3B,SAAS;AACT,QAAQ;AAER,gDAAgD;AAChD,oBAAoB;AACpB,oCAAoC;AACpC,mEAAmE;AACnE,yGAAyG;AACzG,uCAAuC;AACvC,YAAY;AACZ,SAAS;AACT,OAAO;AAEP,6BAA6B;AAC7B,IAAI;AAEJ,mCAAmC;AACnC,sEAAsE;AAEtE,yBAAyB;AACzB,6CAA6C;AAC7C,wDAAwD;AACxD,oCAAoC;AACpC,qCAAqC;AACrC,wCAAwC;AACxC,SAAS;AACT,QAAQ;AAER,iDAAiD;AACjD,qBAAqB;AACrB,qCAAqC;AACrC,6DAA6D;AAC7D,sGAAsG;AACtG,uCAAuC;AACvC,YAAY;AACZ,SAAS;AACT,OAAO;AAEP,8BAA8B;AAC9B,IAAI;AAEJ,iCAAiC;AACjC,yBAAyB;AACzB,2CAA2C;AAC3C,0CAA0C;AAC1C,6BAA6B;AAC7B,SAAS;AACT,QAAQ;AAER,+CAA+C;AAC/C,mBAAmB;AACnB,gCAAgC;AAChC,+CAA+C;AAC/C,oDAAoD;AACpD,0CAA0C;AAC1C,YAAY;AACZ,SAAS;AACT,OAAO;AAEP,4BAA4B;AAC5B,IAAI;AAEJ,gCAAgC;AAEhC,UAAU;AACV,6BAA6B;AAE7B,yBAAyB;AACzB,6BAA6B;AAC7B,4BAA4B;AAC5B,2BAA2B;AAC3B,yBAAyB;AAEzB,yEAAyE;AACzE,sBAAsB;AACtB,yBAAyB;AAEzB,wDAAwD;AACxD,MAAM;AACN,IAAI;;;;AAEG,eAAe;IACpB,OAAO,SAAS,IAAI,CAAC;QAAE,SAAS;IAA4C;AAC9E"}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}